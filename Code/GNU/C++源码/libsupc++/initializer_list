/** @file initializer_list
 *  This is a Standard C++ Library header.
 */

#ifndef _INITIALIZER_LIST
#define _INITIALIZER_LIST

#pragma GCC system_header

#if __cplusplus < 201103L
# include <bits/c++0x_warning.h>
#else // C++0x

/*
1. a braced-init-list is used to list-initialize an object, where the corresponding constructor accepts an std::initializer_list parameter
2. a braced-init-list is used as the right operand of assignment or as a function call argument, and the corresponding assignment operator/function accepts an std::initializer_list parameter
// 上面的信息表明, 必须要对应的函数, 接受这个类型, 才可以使用.
// 构造函数这里特殊一点, 如果没有对应的函数, 可以对 initializer_list 进行分解
3. a braced-init-list is bound to auto, including in a ranged for loop
// 这个就是简单地对于 array 的包装而已.
*/

#pragma GCC visibility push(default)

#include <bits/c++config.h>
// An object of type std::initializer_list<T> is a lightweight proxy object that provides access to an array of objects of type const T.
namespace std
{
  template<class _E>
    class initializer_list
    {
    public:
  // 从上面的文档描述知道, initializer_list 是对 const T 数组的封装, 所以无论是 reference 还是 const_reference 都是 const 的
      typedef _E 		value_type;
      typedef const _E& 	reference;
      typedef const _E& 	const_reference;
      typedef size_t 		size_type;
      typedef const _E* 	iterator;
      typedef const _E* 	const_iterator;

    private:
      iterator			_M_array; // 这里, 传入过来的是一个迭代器, 真正的 Array 没有被 initializer_list 来进行管理.
      size_type			_M_len; // 长度信息, 因为上面存的只是一个迭代器, 所以这里要存储下长度信息.

      // 下面做的事情, 仅仅是对于容器的模拟. 利用上面存储的 开始迭代器和长度信息.

      // The compiler can call a private constructor.
      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }

      // Number of elements.
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };

  /**
   *  @brief  Return an iterator pointing to the first element of
   *          the initializer_list.
   *  @param  __ils  Initializer list.
   *  @relates initializer_list
   */
  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }

  /**
   *  @brief  Return an iterator pointing to one past the last element
   *          of the initializer_list.
   *  @param  __ils  Initializer list.
   *  @relates initializer_list
   */
  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}

#pragma GCC visibility pop

#endif // C++11

#endif // _INITIALIZER_LIST
